import os

from SCons.Environment import Environment
from scripts.scons.utility import GlobRecursive, FindIndex, IsFileName


Import('TARGET_ENVIRONMENT')
TARGET_ENVIRONMENT: Environment

env = TARGET_ENVIRONMENT.Clone()
env.Append(
    LINKFLAGS = [
        '-Wl,-T', env.File('linker.ld').srcnode().path,
        '-Wl,-Map=' + env.File('kernel.map').path
    ],
    CPATH = [ env.Dir('.').srcnode() ],
    CPPPATH = [ env.Dir('.').srcnode() ],
    ASFLAGS = [ '-I', env.Dir('.').srcnode(), '-f', 'elf' ]
)

c_sources = GlobRecursive(env, '*.c')
cpp_sources = GlobRecursive(env, '*.cpp')
asm_sources = GlobRecursive(env, '*.asm')

# Get basenames of C/C++ files to avoid compiling .asm files with the same name
c_cpp_basenames = set()
for source_list in [c_sources, cpp_sources]:
    for sources in source_list:
        for source in sources:
            basename = os.path.splitext(str(source))[0]
            c_cpp_basenames.add(basename)

# Filter out .asm files that have corresponding .c/.cpp files
filtered_asm_sources = []
for source_list in asm_sources:
    for source in source_list:
        basename = os.path.splitext(str(source))[0]
        if basename not in c_cpp_basenames:
            filtered_asm_sources.append(source)

sources = c_sources + cpp_sources + [filtered_asm_sources]
sources = [item for sublist in sources for item in (sublist if isinstance(sublist, list) else [sublist])]

objects = env.Object(sources)
obj_crti = objects.pop(FindIndex(objects, lambda item: IsFileName(item, 'crti.o')))
obj_crtn = objects.pop(FindIndex(objects, lambda item: IsFileName(item, 'crtn.o')))

objects = [
    obj_crti,
    os.path.join(env["TOOLCHAIN_LIBGCC"], 'crtbegin.o'),
    *objects,
    os.path.join(env["TOOLCHAIN_LIBGCC"], 'crtend.o'),
    obj_crtn
]

kernel = env.Program('kernel.bin', objects)

Export('kernel')